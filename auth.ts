// üîê auth.ts - –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è NextAuth.js v5
import NextAuth from "next-auth"
import Google from "next-auth/providers/google"
import { PrismaAdapter } from "@auth/prisma-adapter"
import { PrismaClient } from "@prisma/client"

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è Prisma Client (–∏–∑–±–µ–≥–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π)
const globalForPrisma = globalThis as unknown as {
  prisma: PrismaClient | undefined
}

const prisma =
  globalForPrisma.prisma ??
  new PrismaClient({
    log: ['query'], // –õ–æ–≥–∏ SQL –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ development
  })

if (process.env.NODE_ENV !== 'production') {
  globalForPrisma.prisma = prisma
}

export const { 
  handlers, 
  auth, 
  signIn, 
  signOut 
} = NextAuth({
  // üîå –ê–¥–∞–ø—Ç–µ—Ä –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–µ—Å—Å–∏–π –≤ PostgreSQL
  adapter: PrismaAdapter(prisma),
  
  // üåê –ü—Ä–æ–≤–∞–π–¥–µ—Ä—ã –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
  providers: [
    Google({
      clientId: process.env.GOOGLE_CLIENT_ID!,
      clientSecret: process.env.GOOGLE_CLIENT_SECRET!,
      
      // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø—Ä–æ—Ñ–∏–ª—è
      authorization: {
        params: {
          prompt: "consent",
          access_type: "offline",
          response_type: "code",
          scope: "openid email profile"
        }
      }
    })
  ],
  
  // üìÑ –ö–∞—Å—Ç–æ–º–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
  pages: {
    signIn: "/auth/login",        // –°—Ç—Ä–∞–Ω–∏—Ü–∞ –≤—Ö–æ–¥–∞
    error: "/auth/error",          // –°—Ç—Ä–∞–Ω–∏—Ü–∞ –æ—à–∏–±–æ–∫
    newUser: "/dashboard",         // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  },
  
  // ‚öôÔ∏è Callbacks –¥–ª—è –∫–∞—Å—Ç–æ–º–Ω–æ–π –ª–æ–≥–∏–∫–∏
  callbacks: {
    // –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ JWT —Ç–æ–∫–µ–Ω–∞
    async jwt({ token, user }) {
      if (user) {
        // –ü—Ä–∏ –ø–µ—Ä–≤–æ–º –≤—Ö–æ–¥–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –≤ —Ç–æ–∫–µ–Ω
        token.id = user.id
        token.plan = user.plan || 'FREE'
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ Prisma
        await prisma.user.update({
          where: { id: user.id },
          data: {
            locale: 'ru', // –î–µ—Ñ–æ–ª—Ç–Ω–∞—è –ª–æ–∫–∞–ª—å –¥–ª—è –¶–ê
            timezone: 'Asia/Dushanbe'
          }
        })
      }
      
      return token
    },
    
    // –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ session –æ–±—ä–µ–∫—Ç–∞
    async session({ session, token }) {
      // –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –≤ session
      session.user.id = token.id as string
      session.user.plan = token.plan as string
      
      return session
    },
    
    // –ö–æ–Ω—Ç—Ä–æ–ª—å –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    async authorized({ request, auth }) {
      // –ó–∞—â–∏—â–µ–Ω–Ω—ã–µ routes
      const protectedPaths = ['/dashboard', '/pro', '/api/links']
      const isProtectedPath = protectedPaths.some(path => 
        request.nextUrl.pathname.startsWith(path)
      )
      
      if (isProtectedPath) {
        return !!auth // –¢—Ä–µ–±—É–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
      }
      
      return true // –ü—É–±–ª–∏—á–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    }
  },
  
  // üîê –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Å—Å–∏–π
  session: {
    strategy: "jwt", // –ò—Å–ø–æ–ª—å–∑—É–µ–º JWT –≤–º–µ—Å—Ç–æ database sessions
    maxAge: 30 * 24 * 60 * 60, // 30 –¥–Ω–µ–π
  },
  
  // üõ°Ô∏è –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
  secret: process.env.NEXTAUTH_SECRET,
  
  // üêõ –î–µ–±–∞–≥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è (—Ç–æ–ª—å–∫–æ –≤ development)
  debug: process.env.NODE_ENV === 'development',
  
  // üéØ –°–æ–±—ã—Ç–∏—è –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
  events: {
    async signIn(message) {
      console.log(`‚úÖ User signed in: ${message.user.email}`)
    },
    async signOut(message) {
      console.log(`üëã User signed out: ${message.token?.email}`)
    }
  }
})

// üì§ –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º Prisma –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ API routes
export { prisma }
