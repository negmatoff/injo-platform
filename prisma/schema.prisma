// üóÑÔ∏è Database schema for injo.me/injo.pro platform

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// üë§ User accounts and profiles
model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  image         String?
  emailVerified DateTime?

  // Plan and limits
  plan          PlanType  @default(FREE)
  planExpiresAt DateTime?
  totalLinks    Int       @default(0)
  totalClicks   Int       @default(0)

  // Metadata
  locale    String   @default("ru")
  timezone  String   @default("Asia/Dushanbe")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  links    Link[]
  bioPages BioPage[]
  accounts Account[]
  sessions Session[]
}

// üîó Short links
model Link {
  id          String   @id @default(cuid())
  slug        String   @unique
  originalUrl String
  title       String?
  description String?
  tags        String[]

  // Settings
  isActive  Boolean   @default(true)
  expiresAt DateTime?
  password  String? // Password protection
  domain    String    @default("injo.me")

  // Analytics
  clickCount   Int       @default(0)
  uniqueClicks Int       @default(0)
  lastClickAt  DateTime?

  // Metadata
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  userId  String?
  user    User?       @relation(fields: [userId], references: [id], onDelete: Cascade)
  qrCodes QRCode[]
  clicks  LinkClick[]
}

// üì± QR Codes
model QRCode {
  id     String @id @default(cuid())
  linkId String
  format String @default("PNG")
  size   Int    @default(512)

  // Styling (Pro/Business only)
  backgroundColor String?
  foregroundColor String?
  logoUrl         String?
  cornerStyle     String?

  // File storage
  fileUrl  String
  publicId String // Cloudinary ID

  createdAt DateTime @default(now())

  // Relations
  link Link @relation(fields: [linkId], references: [id], onDelete: Cascade)
}

// üåê Link-in-bio pages
model BioPage {
  id            String  @id @default(cuid())
  slug          String  @unique
  title         String
  description   String?
  avatarUrl     String?
  backgroundUrl String?

  // Theme
  theme        String @default("default")
  primaryColor String @default("#3b82f6")
  fontFamily   String @default("inter")

  // Settings
  isPublished        Boolean @default(false)
  isAnalyticsEnabled Boolean @default(true)
  domain             String  @default("injo.pro")

  // Analytics
  viewCount   Int @default(0)
  uniqueViews Int @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  userId  String
  user    User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  buttons BioButton[]
}

// üîò Bio page buttons
model BioButton {
  id    String     @id @default(cuid())
  type  ButtonType
  label String
  url   String
  icon  String?

  // P2P Payment data (for PAYMENT type)
  paymentProvider String? // "alif", "humo", "dushanbe_city"
  phoneNumber     String?
  amount          Float?

  // Settings
  isActive   Boolean @default(true)
  sortOrder  Int     @default(0)
  clickCount Int     @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  bioPageId String
  bioPage   BioPage @relation(fields: [bioPageId], references: [id], onDelete: Cascade)
}

// üìä Click analytics
model LinkClick {
  id String @id @default(cuid())

  // Location data
  country String?
  city    String?
  region  String?

  // Device data
  device  String?
  browser String?
  os      String?

  // Traffic source
  referrer    String?
  utmSource   String?
  utmMedium   String?
  utmCampaign String?

  ipHash    String? // Hashed for privacy
  timestamp DateTime @default(now())

  // Relations
  linkId String
  link   Link   @relation(fields: [linkId], references: [id], onDelete: Cascade)
}

// üîë NextAuth.js models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// üìã Enums
enum PlanType {
  FREE
  PRO
  BUSINESS
  ENTERPRISE
}

enum ButtonType {
  LINK // Regular URL
  EMAIL // mailto: link
  PHONE // tel: link
  SOCIAL // Social media
  PAYMENT // P2P payment
  TEXT // Just text (no link)
}
