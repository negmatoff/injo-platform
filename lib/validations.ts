// ‚úÖ lib/validations.ts - Zod —Å—Ö–µ–º—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–ª—è API

import { z } from "zod";

// üåê –í–∞–ª–∏–¥–∞—Ü–∏—è URL
export const urlSchema = z
  .string()
  .min(1, "URL –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω")
  .url("–ù–µ–≤–∞–ª–∏–¥–Ω—ã–π URL")
  .max(2048, "URL —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π")
  .refine((url) => {
    // –ó–∞–ø—Ä–µ—â–∞–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ —Å–∞–º–∏—Ö —Å–µ–±—è
    const forbiddenDomains = ["injo.me", "injo.pro", "localhost"];
    const domain = new URL(url).hostname.toLowerCase();
    return !forbiddenDomains.some((forbidden) => domain.includes(forbidden));
  }, "–ù–µ–ª—å–∑—è —Å–æ–∫—Ä–∞—â–∞—Ç—å —Å—Å—ã–ª–∫–∏ –Ω–∞ injo.me");

// üè∑Ô∏è –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ slug
export const customSlugSchema = z
  .string()
  .min(3, "–ú–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞")
  .max(50, "–ú–∞–∫—Å–∏–º—É–º 50 —Å–∏–º–≤–æ–ª–æ–≤")
  .regex(/^[a-zA-Z0-9\_-]+$/, "–¢–æ–ª—å–∫–æ –ª–∞—Ç–∏–Ω–∏—Ü–∞, —Ü–∏—Ñ—Ä—ã, –¥–µ—Ñ–∏—Å –∏ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏–µ")
  .refine((slug) => {
    // –ó–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–ª–æ–≤–∞
    const reserved = [
      "api",
      "auth",
      "admin",
      "dashboard",
      "pro",
      "www",
      "mail",
      "ftp",
      "blog",
      "help",
      "support",
      "about",
      "terms",
      "privacy",
      "contact",
      "login",
      "register",
    ];
    return !reserved.includes(slug.toLowerCase());
  }, "–≠—Ç–æ—Ç slug –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω");

// üìù –°—Ö–µ–º–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Å—ã–ª–∫–∏
export const createLinkSchema = z.object({
  originalUrl: urlSchema,
  title: z.string().max(200, "–ú–∞–∫—Å–∏–º—É–º 200 —Å–∏–º–≤–æ–ª–æ–≤").optional(),
  description: z.string().max(500, "–ú–∞–∫—Å–∏–º—É–º 500 —Å–∏–º–≤–æ–ª–æ–≤").optional(),
  customSlug: customSlugSchema.optional(),
  tags: z.array(z.string().max(30)).max(10, "–ú–∞–∫—Å–∏–º—É–º 10 —Ç–µ–≥–æ–≤").optional(),
  expiresAt: z
    .string()
    .datetime("–ù–µ–≤–∞–ª–∏–¥–Ω–∞—è –¥–∞—Ç–∞")
    .refine((date) => new Date(date) > new Date(), "–î–∞—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º")
    .optional(),
  password: z
    .string()
    .min(4, "–ú–∏–Ω–∏–º—É–º 4 —Å–∏–º–≤–æ–ª–∞")
    .max(50, "–ú–∞–∫—Å–∏–º—É–º 50 —Å–∏–º–≤–æ–ª–æ–≤")
    .optional(),
});

// üìù –°—Ö–µ–º–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏
export const updateLinkSchema = z.object({
  title: z.string().max(200).optional(),
  description: z.string().max(500).optional(),
  originalUrl: urlSchema.optional(),
  tags: z.array(z.string().max(30)).max(10).optional(),
  isActive: z.boolean().optional(),
  expiresAt: z.string().datetime().nullable().optional(),
  password: z.string().min(4).max(50).nullable().optional(),
});

// üìÑ –°—Ö–µ–º–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
export const paginationSchema = z.object({
  page: z
    .string()
    .regex(/^\d+$/, "–î–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º")
    .transform(Number)
    .pipe(z.number().min(1))
    .default("1"),
  limit: z
    .string()
    .regex(/^\d+$/)
    .transform(Number)
    .pipe(z.number().min(1).max(50))
    .default("10"),
  search: z.string().max(100).optional(),
  sortBy: z.enum(["createdAt", "clickCount", "title"]).default("createdAt"),
  sortOrder: z.enum(["asc", "desc"]).default("desc"),
  tag: z.string().max(30).optional(),
});

// üîß –£—Ç–∏–ª–∏—Ç–∞—Ä–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
export function validateRequestBody<T>(
  schema: z.ZodSchema<T>,
  body: unknown
): { success: true; data: T } | { success: false; error: string } {
  try {
    const data = schema.parse(body);
    return { success: true, data };
  } catch (error) {
    if (error instanceof z.ZodError) {
      const message = error.errors
        .map((e) => `${e.path.join(".")}: ${e.message}`)
        .join(", ");
      return { success: false, error: message };
    }
    return { success: false, error: "–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏" };
  }
}
